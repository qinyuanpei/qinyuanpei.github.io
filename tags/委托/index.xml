<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>委托 on 元视角</title><link>https://qinyuanpei.github.io/tags/%E5%A7%94%E6%89%98/</link><description>Recent content in 委托 on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 21 Jul 2016 14:27:07 +0000</lastBuildDate><atom:link href="https://qinyuanpei.github.io/tags/%E5%A7%94%E6%89%98/index.xml" rel="self" type="application/rss+xml"/><item><title>浅析 WPF 中 MVVM 模式下命令与委托的关系</title><link>https://qinyuanpei.github.io/posts/569337285/</link><pubDate>Thu, 21 Jul 2016 14:27:07 +0000</pubDate><guid>https://qinyuanpei.github.io/posts/569337285/</guid><description>&lt;p>各位朋友大家好，我是 Payne，欢迎大家关注我的博客，我的博客地址是&lt;a href="http://qinyuanpei.com">http://qinyuanpei.com&lt;/a>。最近因为项目上的原因开始接触 WPF，或许这样一个在现在来讲显得过时的东西，我猜大家不会有兴趣去了解，可是你不会明白对某些保守的项目来讲，安全性比先进性更为重要，所以当你发现银行这类机构还在使用各种“复古”的软件系统的时候，你应该相信这类东西的确有它们存在的意义。与此同时，你会更加深刻地明白一个道理：技术是否先进性和其流行程度本身并无直接联系。由此我们可以推论出：一项不流行的技术不一定是因为它本身技术不先进，或许仅仅是因为它无法满足商业化的需求而已。我这里的确是在说 WPF,MVVM 思想最早由 WPF 提出，然而其发扬光大却是因为前端领域近年来比较热的 AngularJS 和 Vue.js，我们这里表达的一个观点是：很多你以为非常新潮的概念，或许仅仅是被人们重新赋予了新的名字，当你理清这一切的来龙去脉以后，你会发现这一切并没有什么不同。这符合我一贯的主张：去发现问题的实质、不要被框架束缚、通过共性来消除差异，所以在今天这篇文章里，我想说说 WPF 中 MVVM 模式下命令与委托的关系。&lt;/p></description></item></channel></rss>