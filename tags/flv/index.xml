<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FLV on 元视角</title><link>https://qinyuanpei.github.io/tags/flv/</link><description>Recent content in FLV on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 15 Jul 2023 13:32:47 +0000</lastBuildDate><atom:link href="https://qinyuanpei.github.io/tags/flv/index.xml" rel="self" type="application/rss+xml"/><item><title>前端视频播放技术概览</title><link>https://qinyuanpei.github.io/posts/overview-of-front-end-video-playback-technology/</link><pubDate>Sat, 15 Jul 2023 13:32:47 +0000</pubDate><guid>https://qinyuanpei.github.io/posts/overview-of-front-end-video-playback-technology/</guid><description>转眼间，2023 年已进入下半场，在这样一个时间节点下，长视频平台如爱奇艺、优酷、腾讯视频等，以及短视频平台如抖音、快手等，对大家来说早已是司空见惯的事物。然而，在我们追剧、刷弹幕的时候，很少有人会去深入思考这些平台背后的技术奥秘。直到最近，我需要在前端项目中实现视频播放时，我终于意识到，这些视频不仅在格式上存在着差异，甚至连播放形式都各有不同。举个例子，当下最为火热的 “直播”，通常是指实时的视频播放。相对应地，非实时的视频播放则被称为 “点播”。如果你有接触过 Netflix，你或许还听说过 “流媒体” 这个词汇。为了更好地理解这些概念，我利用空闲时间整理了一个相对完整的技术体系，并以此为基础撰写了今天这篇文章。
从 HTML5 说起 好了，现在让我们从最简单的视频播放方案开始说起。在 HTML5 标准发布前，主流的视频播放方案是使用 Adobe 的 Flash Player 插件，国内的优酷、土豆等视频网站创立初期都经历过这个阶段。后来，随着乔布斯那封 “关于 Flash 的思考” 的公开信的发表，某种意义上加速了整个 Flash 技术的 “消亡”。再后来，随着 HTML5 标准发布，我们可以使用 video 或者 audio 标签在网页中呈现音/视频内容。如图所示，下面是 video 标签的基本用法：
&amp;lt;video controls&amp;gt; &amp;lt;source src=&amp;#34;myVideo.mp4&amp;#34; type=&amp;#34;video/mp4&amp;#34;&amp;gt; &amp;lt;source src=&amp;#34;myVideo.webm&amp;#34; type=&amp;#34;video/webm&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Your browser doesn&amp;#39;t support HTML5 video. Here is a &amp;lt;a href=&amp;#34;myVideo.mp4&amp;#34;&amp;gt;link to the video&amp;lt;/a&amp;gt; instead.&amp;lt;/p&amp;gt; &amp;lt;/video&amp;gt; 具体来讲，这个 video 标签可以支持 Ogg、MPEG4 和 WebM 三种视频格式。可惜，并不是所有的浏览器都支持这些格式，因此，你可以在 video 标签内指定多个视频源，并且当这些视频源都不被支持的时候，你可以使用一个自定义的 HTML 结构来进行降级处理。需要注意的是，MPEG-4 即 MP4 格式，实际上是一组格式，因为在视频处理中通常还涉及到编码器的问题。可不幸的是，浏览器目前唯一支持的编码器是 H.</description></item></channel></rss>