<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>函数式编程 on 元视角</title><link>https://qinyuanpei.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link><description>Recent content in 函数式编程 on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 02 Feb 2017 19:21:12 +0000</lastBuildDate><atom:link href="https://qinyuanpei.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>函数式编程常用术语</title><link>https://qinyuanpei.github.io/posts/2171683728/</link><pubDate>Thu, 02 Feb 2017 19:21:12 +0000</pubDate><guid>https://qinyuanpei.github.io/posts/2171683728/</guid><description>&lt;p>近年来函数式编程这种概念渐渐流行起来，尤其是在 React/Vuejs 这两个前端框架的推动下，函数式编程就像股新思潮一般瞬间席卷整个技术圈。虽然博主接触到的前端技术并不算深入，可这并不妨碍我们通过类似概念的延伸来理解这种概念。首先，函数式编程是一种编程范式，而我们所熟悉的常见编程范式则有&lt;strong>命令式编程(Imperative Programmming)&lt;/strong>、&lt;strong>函数式编程(Functional Programming)&lt;/strong>、&lt;strong>逻辑式编程(Logic Programming)&lt;/strong>、**声明式编程(Declarative Programming)&lt;strong>和&lt;/strong>响应式编程(Reactive Programming)**等。现代编程语言 在发展过程中实际上都在借鉴不同的编程范式，比如 Lisp 和 Haskell 是最经典的函数式编程语言，而 SmartTalk、C++和 Java 则是最经典的命令式编程语言。微软的 C#语言最早主要借鉴 Java 语言，在其引入 lambda 和 LINQ 特性以后，使得 C#开始具备实施函数式编程的基础，而最新的 Java8 同样开始强化 lambda 这一特性，为什么 lambda 会如此重要呢？这或许要从函数式编程的基本术语开始说起。&lt;/p></description></item></channel></rss>