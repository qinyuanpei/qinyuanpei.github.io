<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ZTree on 元视角</title><link>http://example.org/tags/ztree/</link><description>Recent content in ZTree on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 12 Apr 2019 12:37:10 +0000</lastBuildDate><atom:link href="http://example.org/tags/ztree/index.xml" rel="self" type="application/rss+xml"/><item><title>zTree 删除/拖拽子节点保留父节点分组样式</title><link>http://example.org/posts/1397717193/</link><pubDate>Fri, 12 Apr 2019 12:37:10 +0000</pubDate><guid>http://example.org/posts/1397717193/</guid><description>最近需要在项目中实现报表的自定义设置功能，即用户可以针对报表新建自定义分组，分组间可以互相嵌套，分组及分组内的报表需要支持拖拽排序、编辑、删除……相信听到这里，你大概明白我要实现一个什么样的功能了。不错，我要实现一个集美观、功能于一身的树形菜单。本着“不要重复制造轮子”的原则，我在考察了 JQuery EasyUI、layui、Bootstrap、Kendo UI 等不同框架提供的“树形菜单”组件以后，最终选择了zTree这样一个插件，虽然这个官网看上去相当复古，虽然最终的成品依然被同事吐槽丑，可它的确完美得实现了我想要的功能，是当之无愧的“树形菜单”王者。
zTree 的 API 相当复杂，尤其是属性和事件的种类，简直叫一个繁杂，这是大部分基于 jQuery 插件的一个特点。不过 zTree 的使用还是比较简单的，我们只需要提供一个 DOM 节点，一份 JSON 数据，zTree 就可以帮我们在界面上渲染出一个完整的树形菜单：
var data = res.Data; var zNodes = JSON.parse(data.TreeData); $.fn.zTree.init($(&amp;#34;#reportTree&amp;#34;), setting, zNodes); zTree 的节点是由 JSON 结构来定义的，其基本结构是{name:&amp;ldquo;节点名称&amp;rdquo;,children:[]}，父子节点采用相同的结构相互嵌套。例如，下面是博主所使用的数据结构：
[ { &amp;#34;id&amp;#34;: null, &amp;#34;name&amp;#34;: &amp;#34;全部报表&amp;#34;, &amp;#34;url&amp;#34;: null, &amp;#34;pId&amp;#34;: null, &amp;#34;viewUrl&amp;#34;: null, &amp;#34;children&amp;#34;: [ { &amp;#34;id&amp;#34;: null, &amp;#34;name&amp;#34;: &amp;#34;示例报表A&amp;#34;, &amp;#34;url&amp;#34;: null, &amp;#34;pId&amp;#34;: null, &amp;#34;viewUrl&amp;#34;: null, &amp;#34;children&amp;#34;: [ { &amp;#34;id&amp;#34;: null, &amp;#34;name&amp;#34;: &amp;#34;示例报表B&amp;#34;, &amp;#34;url&amp;#34;: null, &amp;#34;pId&amp;#34;: null, &amp;#34;viewUrl&amp;#34;: &amp;#34;/MyReport/List?</description></item></channel></rss>