<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>交互 on 元视角</title><link>http://example.org/tags/%E4%BA%A4%E4%BA%92/</link><description>Recent content in 交互 on 元视角</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Aug 2023 12:30:47 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E4%BA%A4%E4%BA%92/index.xml" rel="self" type="application/rss+xml"/><item><title>基于 SVG 的图形交互方案实践</title><link>http://example.org/posts/practice-of-svg-based-graphic-interaction-solution/</link><pubDate>Sun, 20 Aug 2023 12:30:47 +0000</pubDate><guid>http://example.org/posts/practice-of-svg-based-graphic-interaction-solution/</guid><description>不知道从什么时候起，人们开始喜欢上数字大屏这种“花里胡哨”的东西，仿佛只要用上“科技蓝”这样神奇的色调，就可以让一家公司焕然一新，瞬间变得科技感满满。不管数字大屏的实际意义，是用来帮助企业监控和决策，还是为了方便领导参观和视察，抑或是为了向外界展示和宣传。总之，自从数字大屏诞生之后，它始终就没能摆脱其前任“中国式报表”那种大而全的宿命。追随着 ECharts、Superset、FineBI、DataEase 等数据可视化产品的身影一路走来，你会发现人们在追求“花里胡哨”这件事情上永无止境。如今的数据大屏，元素多(表格、视频、2D/2.5D/3D地图)、种类多(图表、报表、流程图)、媒介多(PC、平板、电视、LED)，主打的就是一个眼花缭乱。
某数据中心设备运行监控示意图当数字大屏的这股时尚潮流涌向物联网和工业互联网领域以后，就不可避免地催生出像上面这样的“数字大屏”需求，请原谅我使用如此模糊的措辞，因为我实在难以给它一个准确的定义，工艺流程图、设备运行监控图、组态图、SCADA&amp;hellip;。也许，这些名称不见得都能做到全面概括，可这些东西的确具备了数字大屏的特征，哪怕这些设备元件、管道阀门在科技蓝配色下违和感十足。作为一位低调的程序员，我一向不喜欢这种粉饰太平的面子工程，所以，当设计师同事带着设计图来找我时，我当时内心是拒绝的：
基于 HTML5 图片热区特性实现交互的思路也许，此时你的内心深处会闪过一丝蔑视，认为这有什么难度呢？我只需要在图片上叠加若干个透明的 div，这样不就可以实现图片特定区域的交互逻辑啦！我承认，这是一个非常好的思路，但是在实践过程中你就会发现，div 的交互区域通常都是一个标准的矩形，而设计师同事常常使用圆角矩形和不规则图形来增强设计感。因此，在交互方面可能会存在一些缺陷，尤其是在 2.5D 的图片设计稿中，交互区域实际上是一个多边形。接下来，我将介绍一种基于 HTML5 图片热区特性来实现交互的思路：
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;Demo-01.jpg&amp;#34; usemap=&amp;#34;#imageMap&amp;#34; style=&amp;#34;width: 600px; height: 315px&amp;#34;&amp;gt; &amp;lt;map name=&amp;#34;imageMap&amp;#34;&amp;gt;&amp;lt;/map&amp;gt; &amp;lt;/div&amp;gt; 首先，准备一张图片以及一个 map 标签，并且这个 map 标签通过 usemap 属性与这张图片进行了关联。参照上面的示意图，我们定义了两个可交互的区域。其中，区域1是矩形区域，区域2是圆形区域：
const areas = [{ key: &amp;#39;半泽直树&amp;#39;, shape: &amp;#39;rect&amp;#39;, coords: [0, 0, 308.5, 315] }, { key: &amp;#39;大和田&amp;#39;, shape: &amp;#39;circle&amp;#39;, coords: [418, 134, 157.5] }] 因为 area 标签需要搭配 map 标签来使用，所以，我们将通过下面的代码来动态地创建区域，同时为每个区域绑定相应的事件：
const popup = document.getElementById(&amp;#39;popup&amp;#39;); const imageMap = document.</description></item></channel></rss>